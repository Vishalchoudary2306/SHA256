module sha_256_tb ();

reg clk;
reg rst_n;
reg start;
reg [511:0] message;
wire [255:0] hash_out ;
wire hash_valid;

reg [31:0] test_number ;
reg test_pass ;
reg all_tests_pass;

sha_256_top dut (
    .clk(clk),
    .rst_n(rst_n),
    .start(start),
    .message(message),
    .hash_out(hash_out),
    .hash_valid(hash_valid)

);

initial begin
    clk = 0;
    forever #7.5 clk = ~clk;
    
end

initial begin
    $dumpfile("dump.vcd");
    $dumpvars;
    #1;
end

function [511:0] create_abc_message;
    begin
        create_abc_message = 512'h0;
        create_abc_message[511:504] = 8'h61;  //a
        create_abc_message[503:496] = 8'h62;  //b
        create_abc_message[495:488] = 8'h63;  //c
        create_abc_message[487:480] = 8'h80;  // paddding bit
        create_abc_message[479:64] = 416'h0;  //zero
        create_abc_message[63:0] = 64'h0000000000000018;  
        
    end
    
    
endfunction

initial begin
    rst_n = 0;
    start = 0;
    message = 512'h0;
    test_number = 0;
    test_pass = 0;
    all_tests_pass = 1'b1;

    $display("============================================");
    $display("SHA_256 VERIFICaTION");
    $display("Time: %0t - Start Simulation", $time);
    $display("============================================");

    #150;
    rst_n =1;
    $display("Time: %0t - Reset_Released", $time);
    #75;
    message = create_abc_message();
    $display("Time: %0t -Messg Load %h", $time, message);

    @(posedge clk);
    #1;
    start =1'b1;
    $display("Time: %0t - Start asserted", $time);

    @(posedge clk);
    #1;
    start =1'b0;
    $display("Time: %0t - Start desserted", $time);

    fork 
        begin
            wait(hash_valid==1'b1);
            $display("Time: %0t - hash valid aesserted", $time);
            $display("hash output: %h", hash_out);

            if (hash_out == 256'hba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad) begin
                $display("TEST PASSED");
                test_pass = 1'b1;
                
            end else begin
                $display("TEST FAILED");
                $display("GOT: %h", hash_out);
                test_pass=1'b0;
            end
        end

    join_any 
    disable fork;

    #150;

    $display("============================================================================");
    $display("TEST SUMMARRY");
    $display("============================================================================");
    if (all_tests_pass && test_pass) begin
        $display("ALL TEST PASSED");
        $display("SHA 256 implementation is correct");
        
    end else begin
        $display("TEST FAILED");
    end
        $finish;
        end
        
    initial begin
        #100000;
        $finish;
    end    
    
endmodule

module simple_sha_256_test;
    reg clk, rst_n,start;
    reg [511:0] message;
    wire [255:0] hash_out;
    wire hash_valid;

    sha_256_top dut (
            .clk(clk),
            .rst_n(rst_n),
            .start(start),
            .message(message),
            .hash_out(hash_out),
            .hash_valid(hash_valid)
    );

    initial begin
        clk = 0;
        forever #10 clk =~clk;
    end

    initial begin
        $dumpfile("dump.vcd");
        $dumpvars(0);
    end

    initial begin
        rst_n = 0;
        start = 0;
        message = 512'h0;

        #100;
        rst_n = 1;
        #50;
        message = {8'h61, 8'h62, 8'h63, 8'h80, 416'h0, 64'h18};
        #50;
        start =1;
        #20;
        start = 0;

        #1000;
        $finish;
    end


endmodule
